@use "sass:math";

@function rem($size) {
    $remSize: math.div($size, $font-size-reset);
    @return $remSize * 1rem;
}

@function fs($size) {
    $remSize: math.div($size, $font-size-reset);
    @return clamp(10px, $remSize * 1rem, $remSize * 1rem);
}

@function breakpoint-next($name, $breakpoints: $grid-breakpoints, $breakpoint-names: map-keys($breakpoints)) {
    $n: index($breakpoint-names, $name);
    @return if($n != null and $n < length($breakpoint-names), nth($breakpoint-names, $n + 1), null);
}

@function breakpoint-min($name, $breakpoints: $grid-breakpoints) {
    $min: map-get($breakpoints, $name);
    @return if($min != 0, $min, null);
}

@function breakpoint-max($name, $breakpoints: $grid-breakpoints) {
    $max: map-get($breakpoints, $name);
    @return if($max != 0, $max - 1, null);
}

@function breakpoint-infix($name, $breakpoints: $grid-breakpoints) {
    @return if(breakpoint-min($name, $breakpoints) == null, "", "-#{$name}");
}

@mixin font-size($fs) {
    font-size: math.div($fs, $font-size-reset) * 1rem;
}

@mixin css-triangle($color, $direction, $size: 6px, $size-arrow: 6px){
    width: 0;
    height: 0;
    @if $direction == down {
        border-left: $size solid transparent;
        border-right: $size solid transparent;
        border-top: $size-arrow solid $color;
    } @else if $direction == up {
        border-left: $size solid transparent;
        border-right: $size solid transparent;
        border-bottom: $size-arrow solid $color;
    } @else if $direction == right {
        border-top: $size solid transparent;
        border-bottom: $size solid transparent;
        border-left: $size-arrow solid $color;
    } @else if  $direction == left {
        border-top: $size solid transparent;
        border-bottom: $size solid transparent;
        border-right: $size-arrow solid $color;
    }
}

@mixin input-placeholder {
    &.placeholder { @content; }
    &:-moz-placeholder { @content; }
    &::-moz-placeholder { @content; }
    &:-ms-input-placeholder { @content; }
    &::-webkit-input-placeholder { @content; }
}

@mixin mq($name, $type: max, $breakpoints: $grid-breakpoints) {
    @if map_has_key($breakpoints, $name) {
        $width: map_get($breakpoints, $name);
        @if $type == max {
            $width: $width - 1px;

            $max: breakpoint-max($name, $breakpoints);
            @if $max {
                @media (max-width: $max) {
                    @content;
                }
            } @else {
                @content;
            }
        } @else {
            $min: breakpoint-min($name, $breakpoints);

            @if $min {
                @media (min-width: $min) {
                    @content;
                }
            } @else {
                  @content;
            }
        }
    }
}

@mixin keyframes($animation-name) {
    @-webkit-keyframes #{$animation-name} {
        @content;
    }
    @keyframes #{$animation-name} {
        @content;
    }
}

@mixin hover() {
    &:hover { @content; }
}
  
@mixin hover-focus() {
    &:hover,
    &:focus {
        @content;
    }
}